apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: helloworld-psp
spec:
  allowPrivilegeEscalation: false
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1000
        max: 1000
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1000
        max: 1000
  volumes:
  - secret
  - emptyDir
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helloworld-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: helloworld-role
rules:
- apiGroups: ['extensions', 'policy']
  resources: ['podsecuritypolicies']
  resourceNames:
  - helloworld-psp
  verbs: ['use']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: helloworld
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: helloworld-role
subjects:
- kind: ServiceAccount
  name: helloworld-sa
---
apiVersion: v1
kind: Service
metadata:
  name: helloworld
spec:
  type: ClusterIP
  ports:
  - port: 8080
  selector:
    app: helloworld
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld
spec:
  replicas: 1
  selector:
    matchLabels:
      app: helloworld
  template:
    metadata:
      labels:
        app: helloworld
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                  - helloworld
            topologyKey: "kubernetes.io/hostname"
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      serviceAccountName: helloworld-sa
      containers:
      - name: helloworld
        image: quay.io/giantswarm/helloworld:latest
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
          limits:
            cpu: 50m
            memory: 50Mi
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        securityContext:
          readOnlyRootFilesystem: true
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: helloworld-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: helloworld
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: helloworld
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-giantswarm"
  name: helloworld
spec:
  ingressClassName: nginx
  rules:
  - host: $(HOST)
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: helloworld
            port:
              number: 8080
  tls:
    - hosts:
        - $(HOST)
      secretName: helloworld-ingress-cert
